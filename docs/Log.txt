#--------------------------------------------------------------
2016-12-03:|
-------------

Fixed numerous bugs including errors in docs/cvx_notes, hessian of test function in example.
Added
    MatrixUtils.solveWithPreconditioning
solver for positive semidefinite system Hx=b (regularized to (H+delta*I)x=b if nearly singular.

Rewrote UnconstrainedSolver to use this solver for the Newton step.
Added tests for all the linear equation solvers.

Status: compiles and runs, all tests working.


#--------------------------------------------------------------
2016-12-06:|
-------------

Numerous new classes (Solution, ObjectiveFunction, Solver,...) to clean up current state.
Started with BarrierSolver.

Status: unfinished.
Code compiles, but the new versions of Type1 power test functions do not work with the UnconstrainedSolver,
output on test. Some items in the solution object empty?

The normSquared test function does work.


#--------------------------------------------------------------
2016-12-09_a:|
---------------

Massive rewrite. Added Traits SamplePoint (of convex set), FeasiblePoint (of constraint set),
SolutionSpace reworked, finished BarrierSolver.

Status: code compiles, completely untested, known bug of 2016-12-06 unresolved.
Probably full of bugs.


#--------------------------------------------------------------
2016-12-10:|
-------------

Renamed TestFunction --> MinimizationProblem, some changes (e.g contains objective Function as value etc.)

#--------------------------------------------------------------
2016-12-11:|
-------------

Consolidated solver parameters (maxIter, alpha,...) into case class.
Finished BarrierSolver, OptimizationProblem.

Code compiles, equation solving tests go through.
Minimization solvers totally untested.



#--------------------------------------------------------------
2016-12-16:|
-------------

Renamed:
OptimizationSolution ---> KnownMinimizer
Solution ---> SolverResult

Finished: power function problems and standard list of OptimizationProblems
(in OptimizationProblems).
Some bugfixes, especially in MatrixUtils.solveWithPreconditioning, where we have to
catch all Exceptions on the first try (could be breeze.linalg.NonConvergedException and not only
our own LinSolveException) to get into the catch block where we do the regularization.

Status: compiles, test of standard problems goes through.


#--------------------------------------------------------------
2016-12-17:|
-------------

Removed some bugs in constructing the phase_I versions of Constraints,
most notably
     Constraint::phase_I, phase_I_SOI
the hessianAt(x) did not return hess but the subslice as result of the subslice assigment.
Parameter signature simplified (parameter dim eliminated, is taken directly from the constraint set).

New optimization problem
                     OptimizationProblems.minX1
with constraints implemented. Fails the test: backtracking line search runs into the boundary
of the feasible region, then the barrier function throws an excpetion as it is evaluated at a point
which is not strictly feasible.


#--------------------------------------------------------------
2016-12-18:|
-------------

Put minX1 at the head of the list of test problems.
Minimal changes in UnconstrainedSolver::solve.
Problem minX1 fails test as backtracking line search does not reach sufficient decrease.
Objective function or gradient of the problem or the barrier solver must be messed up.

#--------------------------------------------------------------
2017-01-14:|
-------------

Fixed bug in the Barriersolver for minimization without equality constraints.
(sign in the computation of the Hessian).
The problem is localized to this one function and should fix the issue everywhere.

With this the the test problem OptimizationProblems.minX1 is solved correctly.
Status: all test problems implemented so far (uncontstrained + minX1) work correctly.


#--------------------------------------------------------------
2017-01-14A:|
--------------

Moved SOI feasibility analysis into the constraint sets.
The BarrierSolvers now always use simple feasibility analysis.

Reason: SOI feasibility analysis is not guaranteed to deliver a feasible point
when applied trivially. More sophisticated application is needed as described
in ConstraintSet.doSOIAnalysis.

Fixed some BUGs in the feasibility solvers. These seem to be working.

Status: test program go through, no known bugs.


--------------------------------------------------------------
2017-01-22:|
-------------

Fixed BUG in MatrixUtils.triangularSolve, added test for same in MatrixUtilsTests.
New class KKTSystem.
Solution relies on MatrixUtils.triangularSolve, forward errors a little large in the (random)
test problems, particularly absolute errors.
This could be a problem when this is extended to the system for the infeasible start
primal-dual method since we will then not get the residuals convergent to zero. So we cannot
use the size of the residuals as a termination criterion.

The errors are too small to indicate a programming bug.
Apparently the test matrices are ill conditioned, the construction H=LL' ensures that the
condition number of H is much worse than that of L.

--------------------------------------------------------------
2017-01-23:|
-------------

Added file docs/KKT.pdf

Added computation of the condition number of H to the KKT tests (via SVD).
These are not that large (about 1600). In light of these condition numbers the solutions are
remarkably inaccurate.
Maybe we need to compute the condition numbers of the whole KKT matrix.

--------------------------------------------------------------
2017-01-23A:|
--------------

Eliminated minor bugs in KktTest setup.
Added parameter debug to KKTSystem solveType0 to print the condition number
of the matrix H after equilibration.


Experiments:
KKTSystem.solveWithCholFactor: works
KKTSystem.blockSolve: works with condition numbers of 2e6, no problems.
KKTSystem.solvePD:
does not work, the difference to blockSolve is only the Ruiz equilibration.
In the test examples equilibration reduces the condition number by half.
Thus there must be a bug in the transformation toi the equilibrated system.

BUG is fixed, status: working!


--------------------------------------------------------------
2017-02-03:|
-------------

Split up the Constraints, each class in its own file.
Constraints, ObjectiveFunction: added reduction method.

Implementation of ::reduced does not compile.
may have to be moved to the companion object.

docs/cvx_notes: minor rewrite.

Status: does not compile.


--------------------------------------------------------------
2017-02-04:|
-------------

Fixed the compilation problem.
Status: compiles.



#----------------------------------------------------------------------------------------
2017-10-09:|
-------------

Major code rewrite:

Equality constraints generally now expressed as Ax=b with matrix A and vector b
handed over as optional parameters:
A:Option[DenseMatrix[Double]], b:Option[DenseVector[Double]]

__BarrierSolver.scala:

Simplified: delegates to UnconstrainedSolver if no equality constraints present
and to EqualityConstrainedSolver (new class) if equality constraints in the form
Ax=b are present.
Solution by elimination of the equality constraints no longer pursued as the main
option, but the object BarrierSolver has a method to allocate such a solver.

__ConstraintSet.scala:

This now contains methods to allocate the solvers for the various feasibility problems
and to do the feasibility analysis.
Status: under construction.


__ConvexSet.scala:

Simplified: the trait SamplePoint eliminated and instead a member function
::samplePoint:Option[DenseVector[Double]]
implemented.



#----------------------------------------------------------------------------------------
2017-10-11:|
-------------

Constraints.scala:
The probability constraints for dist_KL minimization all implemented.

Code rewrite complete, the old problems run successfully.
One test problems has no feasible point and requires feasibility analysis:
test/scala/OptimizationProblems.minX1_no_FP
This problem runs to solution.


#----------------------------------------------------------------------------------------
2017-10-16:|
-------------

Added a logger to all solvers which can now write to log files.
__MatrixUtils.solveWithPreconditioning:
fixed the problem of zero rows (both left and right hand side) in a naive fashion,
see below.

Status:

Currently the problem of zero rows in the KKT system is solved by making the diagonal
element in each zero row equal to one. Since the corresponding right hand sides are zero also,
it follows that the corresponding variable is set to zero.

This may lead to a system with no solutions (probability zero in the generic case).
If the system has a solution, then this solution will satisfy all the original equations
hence is useful.

__OptimizationProblems.kl_1:
does find a feasible point and the optimal solution.
Note: it proves that our intuition is false: probability inequalities that are
not fulfilled by the uniform distribution will _not in general_ be satisfied with
equality at the optimum.
This means that an analytic solution has to be computed using dimension reduction
based on symmetry and minimization of the dimension reduced function which can only be
done explicitly in simple cases.


#----------------------------------------------------------------------------------------
2017-10-17:|
-------------

Implemented logging throughout the solution chain.
Corrected the analytic solution for OptimizationProblems.kl_1
Status: working.

New problem __OptimizationProblems.kl_2:

exactly like OptimizationProblems.kl_1 except the probability constraints
are now equalities instead of inequalities.
Thus the hessian is nearly diagonal since only the constraints x_j>0
contribute to the barrier function.

Leads to singular KKT-system, unclear why.



#----------------------------------------------------------------------------------------
2017-10-18:|
-------------

Wrote out the condition numbers of the matrices arising in the solution of problems
OptimizationProblem.kl_1 and OptimizationProblem.kl_2.
In folder docs/log/ConditionNumbers.

New KL-problem (infeasible) implemented.
Removed bug from UnconstrainedSolver.solve and EqualityConstrainedSolver.solve
(now breaking out of loop when Newton decrement is not > tol,
previously ran through the entire loop until iter=maxIter to no purpose).

Replaced parameter debug:Boolean with debugLevel:Int.
Details about condition numbers are now only printed if debugLevel>2.
No debug output if debugLevel=0 (default).

Status: compiles and runs, inexplicable singularity in some KKTSystems,
see ToDo.txt.

#----------------------------------------------------------------------------------------
2017-11-01:|
-------------

Added an equation solver based on SVD to MatrixUtils. Will compute a candidate solution
even in the singular case (by sharp cutoff of singular values below threshold 1e-14)
then check if it solves the system Ax=b to within tolerance ||Ax-b||<tol.

Added that solution path to KKTSystem.solve (in case the solution based on block elimination
and Cholesky factorization fails).

Status: working.



#----------------------------------------------------------------------------------------
2017-11-02:|
-------------

Added object ConstraintSets (probability constraints  a*P(A) <= a*pA,
b*P(B) <= b*pB, where a,b, are signs to control the direction of the inequality.

Added object FeasibilityTests. Has one test doing simple and SOI feasibility analysis
on an infeasible ConstraintSet as above.

Status: simple feasibility analysis works but SOI analysis does not work
(IndexOutOfBounds on DenseVector).



#----------------------------------------------------------------------------------------
2017-11-05:|
-------------

Implemented EqualityConstraint.phase_I_SOI_EqualityConstraint.
The phase I SOI analysis in the FeasibilityTest now goes through if the tolerance
is lowered to tol=1e-6.

Status: working.







