#--------------------------------------------------------------
2016-12-03:|
-------------

Fixed numerous bugs including errors in docs/cvx_notes, hessian of test function in example.
Added
    MatrixUtils.solveWithPreconditioning
solver for positive semidefinite system Hx=b (regularized to (H+delta*I)x=b if nearly singular.

Rewrote UnconstrainedSolver to use this solver for the Newton step.
Added tests for all the linear equation solvers.

Status: compiles and runs, all tests working.


#--------------------------------------------------------------
2016-12-06:|
-------------

Numerous new classes (Solution, ObjectiveFunction, Solver,...) to clean up current state.
Started with BarrierSolver.

Status: unfinished.
Code compiles, but the new versions of Type1 power test functions do not work with the UnconstrainedSolver,
output on test. Some items in the solution object empty?

The normSquared test function does work.


#--------------------------------------------------------------
2016-12-09_a:|
---------------

Massive rewrite. Added Traits SamplePoint (of convex set), FeasiblePoint (of constraint set),
SolutionSpace reworked, finished BarrierSolver.

Status: code compiles, completely untested, known bug of 2016-12-06 unresolved.
Probably full of bugs.


#--------------------------------------------------------------
2016-12-10:|
-------------

Renamed TestFunction --> MinimizationProblem, some changes (e.g contains objective Function as value etc.)

#--------------------------------------------------------------
2016-12-11:|
-------------

Consolidated solver parameters (maxIter, alpha,...) into case class.
Finished BarrierSolver, OptimizationProblem.

Code compiles, equation solving tests go through.
Minimization solvers totally untested.



#--------------------------------------------------------------
2016-12-16:|
-------------

Renamed:
OptimizationSolution ---> KnownMinimizer
Solution ---> SolverResult

Finished: power function problems and standard list of OptimizationProblems
(in OptimizationProblems).
Some bugfixes, especially in MatrixUtils.solveWithPreconditioning, where we have to
catch all Exceptions on the first try (could be breeze.linalg.NonConvergedException and not only
our own LinSolveException) to get into the catch block where we do the regularization.

Status: compiles, test of standard problems goes through.


#--------------------------------------------------------------
2016-12-17:|
-------------

Removed some bugs in constructing the phase_I versions of Constraints,
most notably
     Constraint::phase_I, phase_I_SOI
the hessianAt(x) did not return hess but the subslice as result of the subslice assigment.
Parameter signature simplified (parameter dim eliminated, is taken directly from the constraint set).

New optimization problem
                     OptimizationProblems.minX1
with constraints implemented. Fails the test: backtracking line search runs into the boundary
of the feasible region, then the barrier function throws an excpetion as it is evaluated at a point
which is not strictly feasible.


#--------------------------------------------------------------
2016-12-18:|
-------------

Put minX1 at the head of the list of test problems.
Minimal changes in UnconstrainedSolver::solve.
Problem minX1 fails test as backtracking line search does not reach sufficient decrease.
Objective function or gradient of the problem or the barrier solver must be messed up.

#--------------------------------------------------------------
2017-01-14:|
-------------

Fixed bug in the Barriersolver for minimization without equality constraints.
(sign in the computation of the Hessian).
The problem is localized to this one function and should fix the issue everywhere.

With this the the test problem OptimizationProblems.minX1 is solved correctly.
Status: all test problems implemented so far (uncontstrained + minX1) work correctly.


#--------------------------------------------------------------
2017-01-14A:|
--------------

Moved SOI feasibility analysis into the constraint sets.
The BarrierSolvers now always use simple feasibility analysis.

Reason: SOI feasibility analysis is not guaranteed to deliver a feasible point
when applied trivially. More sophisticated application is needed as described
in ConstraintSet.doSOIAnalysis.

Fixed some BUGs in the feasibility solvers. These seem to be working.

Status: test program go through, no known bugs.




