
#----------------------------------------------------------------------------------------
2017-10-09:|
-------------

Major code rewrite:

Equality constraints generally now expressed as Ax=b with matrix A and vector b
handed over as optional parameters:
A:Option[DenseMatrix[Double]], b:Option[DenseVector[Double]]

__BarrierSolver.scala:

Simplified: delegates to UnconstrainedSolver if no equality constraints present
and to EqualityConstrainedSolver (new class) if equality constraints in the form
Ax=b are present.
Solution by elimination of the equality constraints no longer pursued as the main
option, but the object BarrierSolver has a method to allocate such a solver.

__ConstraintSet.scala:

This now contains methods to allocate the solvers for the various feasibility problems
and to do the feasibility analysis.
Status: under construction.


__ConvexSet.scala:

Simplified: the trait SamplePoint eliminated and instead a member function
::samplePoint:Option[DenseVector[Double]]
implemented.



#----------------------------------------------------------------------------------------
2017-10-11:|
-------------

Constraints.scala:
The probability constraints for dist_KL minimization all implemented.

Code rewrite complete, the old problems run successfully.
One test problems has no feasible point and requires feasibility analysis:
test/scala/OptimizationProblems.minX1_no_FP
This problem runs to solution.


#----------------------------------------------------------------------------------------
2017-10-16:|
-------------

Added a logger to all solvers which can now write to log files.
__MatrixUtils.solveWithPreconditioning:
fixed the problem of zero rows (both left and right hand side) in a naive fashion,
see below.

Status:

Currently the problem of zero rows in the KKT system is solved by making the diagonal
element in each zero row equal to one. Since the corresponding right hand sides are zero also,
it follows that the corresponding variable is set to zero.

This may lead to a system with no solutions (probability zero in the generic case).
If the system has a solution, then this solution will satisfy all the original equations
hence is useful.

__OptimizationProblems.kl_1:
does find a feasible point and the optimal solution.
Note: it proves that our intuition is false: probability inequalities that are
not fulfilled by the uniform distribution will _not in general_ be satisfied with
equality at the optimum.
This means that an analytic solution has to be computed using dimension reduction
based on symmetry and minimization of the dimension reduced function which can only be
done explicitly in simple cases.


#----------------------------------------------------------------------------------------
2017-10-17:|
-------------

Implemented logging throughout the solution chain.
Corrected the analytic solution for OptimizationProblems.kl_1
Status: working.

New problem __OptimizationProblems.kl_2:

exactly like OptimizationProblems.kl_1 except the probability constraints
are now equalities instead of inequalities.
Thus the hessian is nearly diagonal since only the constraints x_j>0
contribute to the barrier function.

Leads to singular KKT-system, unclear why.



#----------------------------------------------------------------------------------------
2017-10-18:|
-------------

Wrote out the condition numbers of the matrices arising in the solution of problems
OptimizationProblem.kl_1 and OptimizationProblem.kl_2.
In folder docs/log/ConditionNumbers.

New KL-problem (infeasible) implemented.
Removed bug from UnconstrainedSolver.solve and EqualityConstrainedSolver.solve
(now breaking out of loop when Newton decrement is not > tol,
previously ran through the entire loop until iter=maxIter to no purpose).

Replaced parameter debug:Boolean with debugLevel:Int.
Details about condition numbers are now only printed if debugLevel>2.
No debug output if debugLevel=0 (default).

Status: compiles and runs, inexplicable singularity in some KKTSystems,
see ToDo.txt.

#----------------------------------------------------------------------------------------
2017-11-01:|
-------------

Added an equation solver based on SVD to MatrixUtils. Will compute a candidate solution
even in the singular case (by sharp cutoff of singular values below threshold 1e-14)
then check if it solves the system Ax=b to within tolerance ||Ax-b||<tol.

Added that solution path to KKTSystem.solve (in case the solution based on block elimination
and Cholesky factorization fails).

Status: working.



#----------------------------------------------------------------------------------------
2017-11-02:|
-------------

Added object ConstraintSets (probability constraints  a*P(A) <= a*pA,
b*P(B) <= b*pB, where a,b, are signs to control the direction of the inequality.

Added object FeasibilityTests. Has one test doing simple and SOI feasibility analysis
on an infeasible ConstraintSet as above.

Status: simple feasibility analysis works but SOI analysis does not work
(IndexOutOfBounds on DenseVector).


#----------------------------------------------------------------------------------------
2017-11-21:|
-------------

BugFix in KKTData:
on DenseVector the operation :+ (append an element) is defined
and compiles but has no effect!
Therefore we had to switch to Vector[Int] for the type of the nullIndices.

Added KktTest.testKktSystemReduction


KKTSystem: all solvers: added tolerance to parameters.
MatrixUtils:  added logger, debuglevel to svdSolve.

Status: new parameter signatures are only consistent within MatrixUtils and
KKTSystem. Needs to be fixed elsewhere, do a compile and look at the errors.


#----------------------------------------------------------------------------------------
2017-11-22:|
-------------

Numerous changes in Solvers, SolverParams, routines in MatrixUtils.

Files affected:
KKTData, KKTSystem, MatrixUtils, MatrixUtilsTests,
SolverParams, UnconstrainedSolver, EqualityConstrainedSolver,
KktTest, MinimizationTests, Runner

Status: compiles and runs.
Problem dist_KL_2 fails to observe the constraint sum(x_j)=1



#----------------------------------------------------------------------------------------
2017-11-23:|
-------------

Changes in feasibility reporting, debugging output.

Files affected:
InfeasibleProblemException, FeasibilityReport,
EqualityConstraint, Constraint, ConstraintSet,
KKTSystem, MatrixUtils, MatrixUtilsTests


#----------------------------------------------------------------------------------------
2017-11-28:|
-------------

KKTSystem.solveType0:
moved to the transformed system (H -> H+A'A) immediately.
This fixed the problem with OptimizationProblems.kl_2

Fixed up MatrixUtils.solveSVD some more.
Now computes the distance min_x||Ax-b|| and checks if this is below
the tolerance.

Fixed Bug in feasibility report (::reasonWhyInfeasible).

Status: all tests of minimization problems go through correctly except
the random power problems.

Added some Constraints and Objective Functions for test cases.
Files affected:
Constraints, ObjectiveFunctions, QuadraticObjectiveFunction.


#----------------------------------------------------------------------------------------
2017-11-29:|
-------------

Added random feasibility tests.
Files affected:
MatrixUtils, Constraints, ConstraintSet, FeasibilityTests.

Status:
All working except:
Phase_I_Analysis_SOI fails on
FeasibilityTest.checkRandomFeasibleConstraints
in the case where we have too many additional equalities.
Currently we have 3 additional equalities and 20 variables.
This goes through.


#----------------------------------------------------------------------------------------
2017-11-30:|
-------------

Added more constraints in Constraints (sum of absolute values).
For this signCombinationMatrix in MatrixUtils.
MatrixUtils reorganized.

Files affected:
MatrixUtils, Constraints, MatrixUtilsTests, Runner


#----------------------------------------------------------------------------------------
2017-12-11:|
-------------

Added:
Random matrix with control on condition number,
more optimization problems, some renaming, print formatting.

Files affected:
MatrixUtils, MatrixUtilsTests,
FeasibilityReport
Constraints, ConstraintSet,
ObjectiveFunctions, LinearObjectiveFunction (new), Type1Function,
OptimizationProblem, OptimizationProblems, MinimizationTests

Status: compiles, untested.


#----------------------------------------------------------------------------------------
2017-12-12:|
-------------

Cosmetic changes. Files affected as previous.

Status: all minimization problems run successfully.
Power problems fail only if condition number of A is too large!


#----------------------------------------------------------------------------------------
2017-12-14:|
-------------

Added some Optimization problems, expanded KnownMinimizer

Files affected:
KnownMinimizer
MatrixUtils, MatrixUtilsTests,
FeasibilityReport
Constraints, ConstraintSet,
ObjectiveFunctions, LinearObjectiveFunction (new), Type1Function,
OptimizationProblem, OptimizationProblems, SimpleOptimizationProblems (new)
MinimizationTests

Status: compiles and runs but
SimpleOptimizationProblems.normSquaredWithFreeVariables and
SimpleOptimizationProblems.joptP2
fail in phase I analysis.



#----------------------------------------------------------------------------------------
2017-12-20:|
-------------

Cosmetic improvements based on code analysis.
Adhoc branch in Runner added.

Files affected:
Runner, MatrixUtils (Ruiz equilibration and solvers).



#----------------------------------------------------------------------------------------
2017-12-21:|
-------------

Rewrote MatrixUtils.ruizEquilibration (l2-norm until convergence) and the
test MatrixUtilsTests.testRandomMatrixCondNum.

Rewrote MatrixUtils.randomOrthogonalMatrix based on QR decomposition
of random matrix with standard normal entries (this is then uniform in
the Haar measure on O(n)).

Files affected:
Runner, MatrixUtils, MatrixUtilsTests, OptimizationState (new)


#----------------------------------------------------------------------------------------
2017-12-21A:|
--------------

Added method solveSpecial to Solver and all the concrete solvers (allows to specify the
termination criterion explicitly. See ToDo, 2017-12-20, why we need this.
Changes to OptimizationState.

Files affected:
OptimizationState, Solver, UnconstrainedSolver, EqualityConstrainedSolver, BarrierSolver,
ConstraintSet.

Status: compiles and runs, does find a feasible point for the
  SimpleOptimizationProblems.normSquaredWithFreeVariables
problem but then prints nothing in the subsequent optimization.



#----------------------------------------------------------------------------------------
2017-12-22:|
--------------

Fixed reporting of optimization results: moved to the problems from the function
running a list of problems.

Status:
problem f(x)=a'x subject to |x_j|<=|a_j|
phase I analysis fails, claims problem infeasible within tolerance.
Same for  problem Min f(x)=||x||_p subject to ||x||_1=1
and probably many others.
Seems like we are breaking off the phase I analysis too early (as soon as objective function
below zero)

Files affected:

BarrierSolver
ConstraintSet
EqualityConstrainedSolver
KnownSolution
OptimizationProblem
OptimizationState
Solution
Solver
SolverParams
UnconstrainedSolver

Runner
MinimizationTests




#----------------------------------------------------------------------------------------
2017-12-27:|
-------------

Cosmetic fixes,
Fixed BarrierSolver: get the objective function as a field, needed to monitor
the OptimizationState.
MatrixUtils.solveXXX: better error criterion based on relative error ||Ax-b||/||b||
MatrixUtils.svdsolve: regularization is now tried only until the error is below
the tolerance.

Files affected:
BarrierSolver
FeasibilityReport
MatrixUtils
OptimizationProblems
OptimizationState
SimpleOptimizationProblems
UnconstrainedSolver

Runner


Status: all problem run successfully _except_:

SimpleOptimizationProblems.jop2 and
SimpleOptimizationProblems.normSquaredWithFreeVariables


#----------------------------------------------------------------------------------------
2017-12-28:|
-------------

Rewrote phase_I_analysis in the presence of equality constraints whereby we search
for a feasible point x which minimizes ||Ax-b||²+delta*||x||² to start off the
phase_I_analysis. The delta term regularizes this mostly singular problem.

Rewrote the solvers so that we regularize positive semidefinite H via H -> H+delta*I
with delta a field in SolverParams.

svdSolve is useless in any case. For positive definite systems svdSolve is vastly
inferior to the Cholesky factor approach.
Reason: if A is ill conditioned the small singular values (which dominate the solutions
for hard to solve systems) cannot be computed accurately.
Should be noted in cvx_notes.

Files affected:


EqualityConstrainedSolver
KKTSystem
KktTest
MatrixUtils
ObjectiveFunctions
UnconstrainedSolver

FeasibilityTests
Runner


Status: runs to completion on all problems but idiotic results in first step of phase_I_analysis
of the probability simplex.


#----------------------------------------------------------------------------------------
2017-12-29:|
-------------

Rewrote MatrixUtils.svdSolve now based on MatrixUtils.diagonalizationSolve (new) and added
MatrixUtils.symSolve (using the symmetric eigenvalue decomposition).

Files affected:
MatrixUtils

MatrixUtilsTests


#----------------------------------------------------------------------------------------
2018-01-02:|
-------------

Rewrote the equation solvers in MatrixUtils and KKTSystem.
Expanded the test of these solvers in MatrixUtilsTests


Files Affected:

ConstraintSet
KKTSystem
MatrixUtils
UnconstrainedSolver

KkktTest
MatrixUtilsTests
MinimizationTests
SimpleOptimizationProblems



Allocated the problem which occurs in the first step of a phase I analysis
of the probability simplex in SimpleOptimizationProblems. Runs without difficulties.

_ConstraintSet_:
Cleanly separated phase I analysis with equalities from
phase I analysis without equalities.


Status:

MatrixUtilsTests.testEquationSolve:
svdSolve fails badly on ill conditioned, symmetric, positive definite systems
where symSolve and solveWithPreconditioning (Cholesky factorization) have no problems.
Do we have a problem with the SVD in breeze?

MinimizationTests:

All SimpleOptimizationProblems.standardProblems and the distKL problems run to
completion.


#----------------------------------------------------------------------------------------
2018-01-03:|
-------------

MatrixUtils:
added function hsNorm, some reformatting of output.
Fixed bug in svdSolve: breeze SVD is A=UDV _not_ A=UDV' as usual!!
MatrixUtilsTests: added diagonalizationTest

Files affected:
MatrixUtils
MatrixUtilsTests


#----------------------------------------------------------------------------------------
2018-01-08:|
-------------

SimpleOptimizationProblems:
added problem distanceFromOrigin1

Status: runs successfully

Files affected:
SimpleOptimizationProblems
Runner


#----------------------------------------------------------------------------------------
2018-01-09:|
-------------

Method to apply affine transformation x -> u via x=z0+Fu renamed
from "reduced" to "affineTransformed" and systematically implemented for
all players (see files below).

May actually not be needed for the Constraints, it is not implemented for
ConstraintSet, see the remark in the documentation of the method
BarrierSolver.affineTransformed.

Files affected:

BarrierSolver
ConvexSet
Constraint
EqualityConstraint
EqualityConstrainedSolver
OptimizationProblem
UnconstrainedSolver


Status: compiles, affine transform on problems not tested.


#----------------------------------------------------------------------------------------
2018-01-10:|
-------------

Fixed SimpleOptimizationProblems.distanceFromOrigin1

Works in dimension 75 with correct solution but
code cannot find a feasible point within tolerance 1e-8 in dimension 80.

However in dimension 75 the code maxes out in the number of iterations
(20000) with tolSolver at 1e-8.

This problem is interesting since JOptimizer cannot solve it either in dimension
100 (immediately runs out of iterations even though maxiter set to 20000!).


#----------------------------------------------------------------------------------------
2018-01-15:|
-------------

UnconstrainedSolver.solve:
combined backtracking line search with naive trust region approach,
see cvx_notes).

Files affected:
UnconstrainedSolver

Status:
speeds up the SimpleOptimizationProblems.distanceFromOrigin1
considerably.


#----------------------------------------------------------------------------------------
2018-01-16:|
-------------

FeasibilityTests: added switch to turn on/off SOI analysis.

Files affected:

FeasibilityTests
Runner


#----------------------------------------------------------------------------------------
2018-01-16:|
-------------

UnconstrainedSolver.solve:
fixed up trustRadius adjustment

Files affected:
UnconstrainedSolver


#----------------------------------------------------------------------------------------
2018-01-18:|
-------------

EqualityConstraint:
added method to turn the equalities Ax=b into a list of inequality constraints
row_i(A).x <= b_i and row_i(A).x >= b_i.

ConstraintSet:
changed the way phase I analysis deals with equalities, now turned into inequalities.
large speedup on all test problems.

Files affected:
EqualityConstraint
ConstraintSet


#----------------------------------------------------------------------------------------
2018-02-12:|
-------------

Started on PrimalDualSolver.
ConstraintSet (added functions constraintFunctionAt, gradientMatrixAt)
MatrixUtils: renamed solveWithPreconditioning to choleskySolve.
New class SymmetricLinearSystem (a wrapper for all solution algos in MatrixUtils).
OptimizationState: added field dualResidual (needed for PrimalDualSolver).

Files affected:

Unknown: affected by renaming of solveWithPreconditioning
OptimizationState
ConstraintSet
PrimalDualSolver
SymmetricLinearSystem


Status:
compiles but PrimalDualSolver.solve methods are not fully implemented yet.
We need to do this differently as outlined in the ToDo anyway to get rid of
the strict feasibility necessity for the inequality constraints.


#----------------------------------------------------------------------------------------
2018-02-15:|
-------------

Reset maxIter in BarrierSolver to the safer value 1000/mu
(allows 100 iterations in the outer loop for the standard value mu=10).
Worked on PrimalDualSolver.


Files affected:

Unknown: affected by renaming of solveWithPreconditioning
BarrierSolver
ConstraintSet
OptimizationState
PrimalDualSolver
SymmetricLinearSystem


Status: compiles
We need to check if the examples with the BarrierSolver still work.
The PrimalDualSolver is not finished yet.


#----------------------------------------------------------------------------------------
2018-02-19:|
-------------

More work on PrimalDualSolver:

Files affected:
Solution
UnconstrainedSolver
EqualityConstrainedSolver

Status: compiles, untested.


#----------------------------------------------------------------------------------------
2018-02-20:|
-------------

Cleaned up OptimizationState, fields become Options when they are not
present in all cases. More work on PrimalDualSolver.

Files affected:

BarrierSolver
Constraints
ConstraintSet
OptimizationState
PrimalDualSolver

Status: compiles, untested.


#----------------------------------------------------------------------------------------
2018-03-07:|
-------------

Changes to Constraint and ConstraintSet to support the globally relaxed constraints
for the PrimalDualSolver. PrimalDualSolver with global relaxation is
almost implemented (the new objective function is still missing, currently set to null).

Files affected:

Constraint
Constraints
ConstraintSet
LinearConstraint
QuadraticConstraint
PrimalDualSolver

tests:
SimpleOptimizationProblems

Status: compiles, untested (even the existing tests not rerun).


#----------------------------------------------------------------------------------------
2018-03-08:|
-------------

ObjectiveFunction:
implemented member functions that return the objective function for the globally
and the locally relaxed problem. Factory methods for allocation of PrimalDualSolver
completed

Files affected:
ObjectiveFunction
PrimalDualSolver

Status: compiles, untested.


#----------------------------------------------------------------------------------------
2018-03-12:|
-------------

New object ConvexSets.
Removed class FeasibleSet from ConvexSet.scala,
made this instead member functions of ConvexSets, although these member functions are not
needed (now implemented also in ConstraintSet).

Removed the parameter pars from the test problems. They all run on
SolverParams.standardParams now. Added abstract ::setWhereDefined to ConstraintSet.
All tests optimization problems adapted to the new signatures.

OptimizationProblem factory function gets parameter solverType to choose between the
BarrierSolver and the two versions of the PrimalDualSolver for solution.

Files affected:

BarrierSolver
ConstraintSet
ConvexSets
OptimizationProblem
SolverParams

Runner
ConstraintSets
KktTest
OptimizationProblems
SimpleOptimizationProblems

Status: compiles
With barrier solver the test problems go through except
example-1.5, where it computes a better solution than known,
thus something wrong with the example.

PrimalDualSolver fails since the convex set C is not updated to
new_C = C x R, C x R^^p in the second and third apply method of
BarrierSolver.


#----------------------------------------------------------------------------------------
2018-03-13:|
-------------

Numerous BUG-fixes in PrimalDualSolver.

Files affected:

ConstraintSet
EqualityConstraint
MatrixUtils
ObjectiveFunction
OptimizationProblem

Status: compiles,
BarrierSolver works,
PrimalDualSolver not working: dimension mismatch in function
kktSystem_withEqs in the definition of q.



#----------------------------------------------------------------------------------------
2018-03-15:|
-------------

Numerous bug fixes.

Files affected:
ObjectiveFunction
PrimalDualSolver

Status: compiles,
BarrierSolver works,
PrimalDualSolver not working: runs but does not converge (no equality constraints)
or line search fails (with equality constraints).


#----------------------------------------------------------------------------------------
2018-03-19:|
-------------

Bug fix: approach in PrimalDualSolver with relaxation of constraints was incorrect.
Eliminated. Phase I analysis using the BarrierSolver is now used instead to find a
feasible starting point.

Note PrimalDual <---> Barrier analogy:   lambda(i) = - 1/[t*(g_i(x)-u_i)]

Files affected:

BarrierSolver
ConstraintSet
EqualityConstrainedSolver
OptimizationProblem
PrimalDualSolver
Solution
SolverParams
UnconstrainedSolver

Runner
OptimizationProblems
SimpleOptimizationProblems
MinimizationTests


Status:
compiles and runs, but line search unsuccessful in PrimalDualSolver.
BarrierSolver is working on all test problems.

Warning: branch off with the next update which seems to destroy the BarrierSolver also.














