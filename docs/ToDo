
#-------------------------------------------------------------------------------------------
2017-10-09:|
-------------

First: Clean up ConstraintSet.scala
Clean up the tests to conform to the new signatures.

Modify FeasibilityReport to include ||Ax-b|| in case of equality constraints.

Write tests cases based on Kullback-Leibler distane minimization with known solution
(because of symmetry) or known infeasibility (because of probabilistic inequalities).



#-------------------------------------------------------------------------------------------
2017-10-10:|
-------------

Do we have to do something special if the set of inequality constraints is empty?

Add on expectation, moment and probability inequality constraints to the
Constraints object.



#----------------------------------------------------------------------------------------
2017-10-11:|
-------------

Implement feasible dist_KL problems with known analytic solutions
and some which are known to be infeasible.


#----------------------------------------------------------------------------------------
2017-10-12:|
-------------

ConstraintSet.phase_I_Analysis:

(A) The phase I problem can lead to a singular KKT system under reasonable conditions.
To see this consider a case where the side conditions are linear (hence Hessian zero)
and do not depend on some of the variables.
The Hessian of the barrier function (cvx.pdf, p40 (44)) then has zero rows.

Currently this leads to an exception in
    MatrixUtils$.ruizEquilibrate(MatrixUtils.scala:152)
	at MatrixUtils$.solveWithPreconditioning(MatrixUtils.scala:190)

as the preconditioner does not tolerate a zero row in the Hessian H
(if there are no equality conditions).

If there are no equality conditions then a zero row in the Hessian H
leads to a singular system which has zeros on the right hand side, so that it
is still solvable, but we have not implemented a solution for such a system.

The code in MatrixUtils$.solveWithPreconditioning needs to be adapted to cope
with this case also.

The problem occurs for example with the test problem
OptimizationProblems.kl_1 if we remove the probability conditions
x_j>0 and sum_jx_j=1 from the list of conditions.

(B) The barrier solver for the phase I problem does not deal with the
equality constraints correctly:
   dimension mismatch, e.g. in OptimizationProblems.kl_1
What should we do with these?
We could disregard them in phase I and return a feasible point satisfying
only the inequality constraints, then hope that a full Newton step
is taken in the solution of the original KKT system (which implies that the
equality constraints are satisfied automatically).


#----------------------------------------------------------------------------------------
2017-10-16:|
-------------

__EqualityConstraint:

implement the function ::phase_I_SOI_EqualityConstraint: EqualityConstraint

__OptimizationProblems.kl_1:
work out the solution for general n, heuristic is that the probability condition
on the big set (j>=n/2) must be hit with equality.


#----------------------------------------------------------------------------------------
2017-10-17:|
-------------

__EqualityConstraint:
implement the function ::phase_I_SOI_EqualityConstraint: EqualityConstraint

Implement bigger, randomly generated KL_problems to see how fast/slow we are
with the KKT system solution without native libraries.

!!__OptimizationProblems.kl_2
Figure out why this leads to a singular KKT system in the phase I analysis.
The hessian H of the barrier function in KKTSystem::blockSolve really is singular!
See also Log.txt.

Note: this system has only the positivity constraints x_j>0 as inequalities.
In phase I analysis the j-th constraint each of depends on the j-th variable
and the new variable s (the last variable) only. Thus the hessian of the constraint
is nonzero only on the diagonal and the last row and column.

The objective function only depends on the variable s, so the hessian has only
one nonzero entry (last diagonal element). Consequently the hessian of the barrier
function has the same structure as that of the constraints. This is indeed what we
see in the log file BUT this matrix is singular
(subtract all other rows from the last one).

It is hard to believe that the constraints x_j>0 lead to a singular hessian
for the barrier function. BUG suspected.


#----------------------------------------------------------------------------------------
2017-10-18:|
-------------

Figure out why the phase I analysis for the OptimizationProblems.kl_1
and OptimizationProblems.kl_3 run into a singular KKT system.

__BUG___ detected: Ruiz equilibration leads from a positive definite matrix H
to one which has a slightly negative eigenvalue!!!!
Then the corresponding KKTSystem is flagged as singular, see
Logs/ConstraintSet_phase_I_log.txt


#----------------------------------------------------------------------------------------
2017-11-01:|
-------------

KKTSystem.solve:
tries the block elimination with Cholesky factorization. If this fails
regularizes the system with the trick in Boyd. This will fail if the system is
singular. In this case we go to SVD. Check that all this is proper, i.e. no
regularization which distorts the system too much so solutions are no longer
Newton steps in a _descent direction_.
This could happen if we were to use simple regularization by adding eps*I
to the singular (but positive semidefinite) Hessian H.

Is likely correct.

_tolerances_:

Currently we have only one tolerance parameter to handle all tolerances:
for constraints
for the duality gap (termination criterion in barrier solver)
for norm of gradient (as termination criterion in case of interior point solution).

It may be useful to distinguish between these tolerance since in particular the
tolerance for the duality gap often has to be reduced to avoid running into a
singular KKT system.


----------------------------------------------------------------------------------------
2017-11-02:|
-------------

SOI analysis does not work (IndexOutOfBounds on DenseVector).
Run the feasibility tests in Runner.


#----------------------------------------------------------------------------------------
2017-11-21:|
-------------

KKTSystem: all solvers: added tolerance to parameters.
MatrixUtils:  added logger, debuglevel to svdSolve.

Status: new parameter signatures are only consistent within MatrixUtils and
KKTSystem. Needs to be fixed elsewhere, do a compile and look at the errors.


#----------------------------------------------------------------------------------------
2017-11-22:|
-------------

Problem dist_KL_2 fails to observe the constraint sum(x_j)=1
Computation fails due to very bad condition numbers.

This problem does have _inequality constraints_ for the probabilities
(x_j>0) so is not dissimilar to problem kl_1 with no equality constraints.

In our problem in the very first step of the Iteration along the central path
at the very first index t=1 the matrix H is easily seen to be singular!
Why is that?

Solved: by transforming the system via H -> H+A'A and the rest accordingly.


#----------------------------------------------------------------------------------------
2017-11-28:|
-------------

Status: all tests of minimization problems go through correctly except
the random power problems. Examine what's the matter with these.

Use the new random constraints in Constraints and random quadratic objective functions to

(A) build ConstraintSets with known feasible point x0 and do a phase_I_Analysis on these.
(B) Combine the Constraint sets with a quadratic objective function with global minimum
    at x=x0, then solve the constrained problem.


Might be a good idea to add a function randomConstraintSet to the object ConstraintSets.


#----------------------------------------------------------------------------------------
2017-11-29:|
-------------

Phase_I_Analysis_SOI fails on
FeasibilityTest.checkRandomFeasibleConstraints
in the case where we have too many additional equalities.
Currently we have 3 additional equalities and 20 variables.
This goes through.

Write some tests of random quadratic objective functions under random
ConstraintSets. Then import the test case from JOptimizer.


#----------------------------------------------------------------------------------------
2017-11-30:|
-------------

Write some tests based on sum of absolute values constraints,
e.g. maximize  a dot x subject to |x_j|<=|a_j|.
Might want to introduce a new method in Constraints to generate
the list of these constraints.


#----------------------------------------------------------------------------------------
2017-12-11:|
-------------

Add the new problems
OptimizationProblems.maxDotproduct,maxEigenVector
to the list in MinimizationTests.runAll.


#----------------------------------------------------------------------------------------
2017-12-12:|
-------------

cvx-notes: add references:
https://web.stanford.edu/~boyd/papers/graph_dcp.html
http://cvxr.com/dcp/

cvx-code: update all references to cvx-notes in the scala-doc.


#----------------------------------------------------------------------------------------
2017-12-13:|
-------------

Now that the natives load and we point to the openblas we have the
numerical problem with symmetry of Q*Q.t again.
Write a test to verify that the problem exists.


#----------------------------------------------------------------------------------------
2017-12-14:|
-------------

Write a function that constructs a list of constraints corresponding to
a matrix inequality Gx<=h.

SimpleOptimizationProblems.normSquaredWithFreeVariables and
SimpleOptimizationProblems.joptP2
fail in phase I analysis.


#----------------------------------------------------------------------------------------
2017-12-20:|
-------------

The phase I analysis problem is not generally bounded below.
E.g.: the SimpleOptimizationProblems.normSquaredWithFreeVariables
Thus the phase I barrier solver needs to break off as soon as the
objective s has been pushed below zero.

For this it needs to know that it is a phase I barrier solver.
We need to introduce a field into Barrier Solver which as this information.

The same applies to the phase I SOI solver.
Deal with this as follows:
the function Solver.solve gets a new parameter
  terminationCriterion: OptimizationState => Boolean

The Double parameters of this function monitor the state of the computation
(e.g.: current value of the objective function, duality gap, norm of gradient, etc)
and break off the computation based on these.

We need different termination criteria for different applications.
For example a simple phase I analysis problem needs to break off as soon as the
objective function is pushed below zero since then we have a strictly feasible
point already.

On the other hand when solving a usual minimization problem, we break off
when the duality gap or the norm of the gradient is small enough.


#----------------------------------------------------------------------------------------
2017-12-21A:|
-------------

SimpleOptimizationProblems.normSquaredWithFreeVariables
does find a feasible point but then prints nothing in the subsequent optimization.
Currently run a an adHoc problem in Runner.


#----------------------------------------------------------------------------------------
2017-12-22:|
--------------

Status:
problem f(x)=a'x subject to |x_j|<=|a_j|
phase I analysis fails, claims problem infeasible within tolerance.
Same for  problem Min f(x)=||x||_p subject to ||x||_1=1
and probably many others.
Seems like we are breaking off the phase I analysis too early (as soon as objective function
below zero)


#----------------------------------------------------------------------------------------
2017-12-27:|
-------------

The BarrierSolver needs to start from a _strictly_ feasible point since we use
the logarithmic barrier function.
This needs to be worked into the FeasibilityReport (report on strict feasibility).

SimpleOptimizationProblems.jop2 and
SimpleOptimizationProblems.normSquaredWithFreeVariables
do not run to completion.

SimpleOptimizationProblems.joptP2:
fails in phase I analysis
the equalityGap is not shrinking in the outer loop
of the barrier solver so this outer loop iterates to values of t for which the system is
too ill conditioned to be solved.
The solution of the KKTsystem does not yield a descent direction even when this system is
still well conditioned. The inner newton loop then breaks of and the outer loop moves to
the next parameter value t and the system becomes more and more ill conditioned until
the solution fails completely.


SimpleOptimizationProblems.normSquaredWithFreeVariables
fails in large dimension:
works in dimension 24 but fails in dimensions >= 25 in phase I analysis.
Note (debug in dim=2): in phase I analysis we get a singular KKT system
with zero rows and cols (why are these not eliminated?) of the form

x1-x3 = 1
0x1+0x3 = 0
-x1+x3 = 0

which is indeed unsolvable to any tolerance < 1.


#----------------------------------------------------------------------------------------
2017-12-28:|
-------------

Phase I analysis with equality constraints:
the first step minimizing ||Ax-b||² subject to the inequality constraints
breaks off too soon with completely ridiculous results making the norm huge instead of
small in the case where the constraintSet is the probability simplex.

Incidentally this problem is ill conditioned, the matrix A has rank one (only one equality)
and A'A is the matrix with all entries equal to one.

The problem then becomes the following:

Minimize (x1+x2+...+xn - 1)² subject to xj>=0.

Clearly the set of minimizers is the entire probability simplex.
In this simple problem we can study the effects of ill conditioning and regularization.


KKTSystem:
we should implement a check if the iterative solution of the linearized KKTSystem
solves the original nonlinear KKTSystem accurately and throw an exception if it does not.


KKTSystem:
we should implement a check if the iterative solution of the linearized KKTSystem
solves the original nonlinear KKTSystem accurately and throw an exception if it does not.

openblas:
we still have the problem that A.t*A is not symmetric enough to pass the LAPACK test for
symmetry. This is a problem with the prepackaged openblas.
openblas needs to be compiled from source on this machine.


#----------------------------------------------------------------------------------------
2017-12-29:|
-------------

:_ConstraintSet_:
Phase I analysis is not correct as implemented, since the termination criterion in case
there are no equality constraints does not fit if we run into this case from a phase I
analysis with equalities.

Therefore these two cases must be separated cleanly in phase I analysis.
There is no reason to move from one case to the other since both minimizations
will produce strictly feasible points.
Note that phase I analysis with equalities Ax=b minimizes ||Ax-b||^^2 subject to the
inequalities and thus conducts a phase I analysis on these inequalities without
equalities producing a strictly feasible point for these, if one exists.

Done!


#----------------------------------------------------------------------------------------
2018-01-08:|
-------------

Add a method to linearly distort a problem (linear change of coordinates).
We can then experiment with ill conditioned distortion matrices.
Method should live in Optimization problem.

Done with affine transform!


#----------------------------------------------------------------------------------------
2018-01-09:|
-------------

Throw an exception if the ConstraintSet.phase_I_Analysis with equalities is not able
to push the relative error ||Ax-b||/||b|| below pars.toleqSolve.

In OptimizationProblems implement a static method to apply an affine transform to a list
of problems and rewrite known solutions into the new variable. We can then efficiently
test affine transforms and the effect of ill conditioning on all our test problems.



#----------------------------------------------------------------------------------------
2018-01-10:|
-------------

SimpleOptimizationProblems.distanceFromOrigin1

works in dimension 75 with correct solution but
code cannot find a feasible point within tolerance 1e-8 in dimension 80.

However in dimension 75 the code maxes out in the number of iterations
(20000) with tolSolver at 1e-8.
Here maxIter controls the number of Newton steps at a fixed parameter t
in the outer loop of the barrier solver. This parameter t is only increased
(by a factor of 10 in each step) until the upper bound ub(t) for the duality gap

    ub(t) = numIneqs / t

is below the threshold tolSolver. The number of steps in the outer loop is
the smallest integer k such that

    numIneqs / 10^^{k-1} <= tolSolver = 1e-8

i.e. 2*dim-1 <= 10^^{k-9}  which is of the order of k=11,12.
The problem is therefore clearly with the solution of the KKT system in each step
t  of the outer loop.


This problem is interesting since JOptimizer cannot solve it either in dimension
80 (immediately runs out of iterations even though maxiter set to 20000!).


On the other hand there are no problems with
     SimpleOptimizationProblems.distanceFromOrigin0
which is
     min ||x||^^2  on ||x-2e_{n+1}||<=1
with solution at x=e_{n+1}. So the problem must come from the linear
constraints
     x_j+x_{n+1} >= 1, j=1,2,...,n


#----------------------------------------------------------------------------------------
2018-01-15:|
-------------

Integrate the trust region notes into cvx_notes.


#----------------------------------------------------------------------------------------
2018-01-16:|
-------------

Fix SOI analysis with equalities so it becomes a one step process:
Eliminate the equalities Ax=b and replace them with inequalities
a_j'x<=0 and -a_j'x<=0.
This should speed up the computation since only one optimization
is carried out.

Don't waste any more time on the barrier method, move onto
infeasible start primal dual method.


#----------------------------------------------------------------------------------------
2018-02-13:|
-------------

Primal dual solver:
needs to start from a strictly feasible point x but which need not
satisfy the equality constraints.

Transform this to the problem with 2 new slack variables s,t

      min h(x,s,t):=s+K*t  such that f(x)<=s and g_i(x)<=u_i+t

If t<tolFeasible the the problem is classified as feasible within
tolerance. If K is chosen large enough, we can ensure that feasibility
is prioritized over function value minimization.

At the minimum point (x0,s0,t0) we have that f(x0)=s0 is the minimum
over f(x) such that g_i(x)<=u_i+t.
We just have no control over the value of t. I.e. there is a tradeoff
between function minimization and inequality constraint satisfaction.

By choosing K larger we can prioritize constraint satisfaction.
By choosing K very large we will push down t as much as possible.
A weakness lies in the fact that all inequalities are relaxed by the
same amount t.

Individual relaxation by slack variables t_i would solve the problem

    min h(x,s,t) = s+(K,t)
subject to
    f(x)<=s, t_i>=0 and g_i(x)<=t_i

Here K is a vector with components K_i>0, t=(t_i) is a vector of slack variables
where we have a slack variable t_i for each constraint g_i(x)<=u_i.
The constraints t_i>=0 make sure that get no distortion from constraints
g_i(x) << u_i (large negative t_i) which then affects the minimum s=f(x).

By choosing the K_i larger or smaller we can prioritize the constraints
individually.

This increases the number of variables substantially though the new matrices
are sparse. Since we do not take advantage of sparsity this approach is limited
to small problems.

See docs/primaldual.pdf


#----------------------------------------------------------------------------------------
2018-02-15:|
-------------

We need to make the parameter mu with which the barrier penalty parameter t is
multiplied in each step of the solution a part of the structure SolverParams.

Currently this is hard coded to the value mu=10.0.

(??) Derive KKTSystem from SymmetricLinearSystem. We then only have to add the method
blockSolve as the more efficient approach to solution only available in a KKT type
symmetric linear system. Currently though the structure of the solutions is different,
since the KKTSystem returns the solution as a pair (x,lambda).

PrimalDualSolver:
solve_noEqs, solve_withEqs: solution sol is not updated from sol=null at start,
will return null.
We need to think about what we return as a solution:
only x or x,lambda and nu.
We may have to generalize the notion of Solution to contain the dual variables.
dualityGap is not set correctly to the surrogate duality gap.

Status:
Project compiles but we need to check if the examples with the BarrierSolver still
work.
The PrimalDualSolver is not finished yet.



#----------------------------------------------------------------------------------------
2018-02-20:|
-------------

ConstraintSet:
implement the methods which construct the relaxed
constraint sets for the PrimalDualSolver.
These are simply the phase_I constraint sets augmented with the additional
constraint s>=0 in the case of one slack variable
and the
           phase_I_SOI
constraint set itself in the case of local relaxation with multiple
slack variables s_j (this one contains the constraints s_j>=0 already).
See docs/primaldual.pdf


#----------------------------------------------------------------------------------------
2018-03-07:|
-------------

PrimalDualSolver:
Implement member functions that transform the objective function to
the objective function for the relaxed of objectives (global or local relaxation).

With this implement the factory functions in the PrimalDualSolver object
for solvers with no starting point and relaxed constraints.
See docs/primaldual.pdf



#----------------------------------------------------------------------------------------
2018-03-12:|
-------------


PrimalDualSolver fails since the convex set C is not updated to
new_C = C x R, C x R^^p in the second and third apply method of
BarrierSolver.
The convex set C has to be expanded in dimension with the new slack variables.


#----------------------------------------------------------------------------------------
2018-03-13:|
-------------

PrimalDualSolver with equality constraints not working: dimension mismatch in function
kktSystem_withEqs in the definition of q.




